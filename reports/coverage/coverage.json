{
"C:\\Users\\apozgaj\\Documents\\GitHub\\angular2-webpack2-setup\\angular2-webpack2-setup\\angular2-webpack2-setup\\src\\main.test.js":{"path":"C:\\Users\\apozgaj\\Documents\\GitHub\\angular2-webpack2-setup\\angular2-webpack2-setup\\angular2-webpack2-setup\\src\\main.test.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"requireAll","line":59,"loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":36}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":14,"column":33}},"2":{"start":{"line":15,"column":0},"end":{"line":15,"column":31}},"3":{"start":{"line":16,"column":0},"end":{"line":16,"column":23}},"4":{"start":{"line":17,"column":0},"end":{"line":17,"column":31}},"5":{"start":{"line":20,"column":0},"end":{"line":20,"column":22}},"6":{"start":{"line":21,"column":0},"end":{"line":21,"column":29}},"7":{"start":{"line":23,"column":0},"end":{"line":23,"column":29}},"8":{"start":{"line":24,"column":0},"end":{"line":24,"column":46}},"9":{"start":{"line":25,"column":0},"end":{"line":25,"column":35}},"10":{"start":{"line":26,"column":0},"end":{"line":26,"column":40}},"11":{"start":{"line":27,"column":0},"end":{"line":27,"column":34}},"12":{"start":{"line":28,"column":0},"end":{"line":28,"column":30}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":38}},"14":{"start":{"line":33,"column":0},"end":{"line":33,"column":19}},"15":{"start":{"line":35,"column":0},"end":{"line":35,"column":49}},"16":{"start":{"line":36,"column":0},"end":{"line":36,"column":69}},"17":{"start":{"line":38,"column":0},"end":{"line":41,"column":2}},"18":{"start":{"line":52,"column":0},"end":{"line":52,"column":61}},"19":{"start":{"line":59,"column":0},"end":{"line":61,"column":1}},"20":{"start":{"line":60,"column":2},"end":{"line":60,"column":51}},"21":{"start":{"line":64,"column":0},"end":{"line":64,"column":40}}},"branchMap":{},"code":["/**"," * @authors: @qdouble and @AngularClass"," */","","/*"," * When testing with webpack and ES6, we have to do some extra"," * things to get testing to work right. Because we are gonna write tests"," * in ES6 too, we have to compile those as well. That's handled in"," * karma.conf.js with the karma-webpack plugin. This is the entry"," * file for webpack test. Just like webpack will create a bundle.js"," * file for our client, when we run test, it will compile and bundle them"," * all here! Crazy huh. So we need to do some setup"," */","Error.stackTraceLimit = Infinity;","require('./polyfills.browser');","require('core-js/es6');","require('core-js/es7/reflect');","","// Typescript emit helpers polyfill","require('ts-helpers');","require('./jasmine.matchers')","","require('zone.js/dist/zone');;","require('zone.js/dist/long-stack-trace-zone');","require('zone.js/dist/async-test');","require('zone.js/dist/fake-async-test');","require('zone.js/dist/sync-test');","require('zone.js/dist/proxy');","require('zone.js/dist/jasmine-patch');","","","// RxJS","require('rxjs/Rx');","","const testing = require('@angular/core/testing');","const browser = require('@angular/platform-browser-dynamic/testing');","","testing.getTestBed().initTestEnvironment(","  browser.BrowserDynamicTestingModule,","  browser.platformBrowserDynamicTesting()",");","","/*"," * Ok, this is kinda crazy. We can use the the context method on"," * require that webpack created in order to tell webpack"," * what files we actually want to require or import."," * Below, context will be an function/object with file names as keys."," * using that regex we are saying look in ./src/app and ./test then find"," * any file that ends with spec.js and get its path. By passing in true"," * we say do this recursively"," */","const testContext = require.context('.', true, /\\.spec\\.ts/);","","/*"," * get all the files, for each file, call the context function"," * that will require the file and load it up here. Context will"," * loop and require those spec files here"," */","function requireAll(requireContext) {","  return requireContext.keys().map(requireContext);","}","","// requires and returns all modules that match","const modules = requireAll(testContext);"],"l":{"14":1,"15":1,"16":1,"17":1,"20":1,"21":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"33":1,"35":1,"36":1,"38":1,"52":1,"59":1,"60":1,"64":1}}}
